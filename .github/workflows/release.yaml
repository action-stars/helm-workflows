name: GH Reusable Workflow Release Helm Charts

on:
  workflow_call:
    secrets:
      oci_password:
        description: OCI registry password.
        required: false
    inputs:
      chart_dir:
        description: Directory containing the charts to validate.
        type: string
        required: false
        default: charts
      helm_repos:
        description: List of Helm repos to install; as a comma separated list in the format <name>=<address>.
        type: string
        required: false
        default: ""
      release_name_version_prefix:
        description: Prefix for the release name version.
        type: string
        required: false
        default: ""
      release_as_latest:
        description: If the release should be created as latest.
        type: boolean
        required: false
        default: true
      release_notes:
        description: If the release notes should be created from a CHANGELOG.
        type: boolean
        required: false
        default: false
      publish_gh_pages:
        description: If the chart should be released to the current repository's GH Pages.
        type: boolean
        required: false
        default: true
      publish_oci:
        description: If the chart should be released to an OCI registry.
        type: boolean
        required: false
        default: false
      oci_registry:
        description: OCI registry to publish the charts to.
        type: string
        required: false
        default: "ghcr.io"
      oci_username:
        description: OCI registry username.
        type: string
        required: false
        default: ${{ github.actor }}
      oci_repository_prefix:
        description: OCI repository prefix, will default to the current repository name.
        type: string
        required: false
        default: ${{ github.repository }}
      artifact_hub_config_file:
        description: Name of the Artifact Hub repository configuration file.
        type: string
        required: false
        default: artifacthub-repo.yaml

jobs:
  check:
    name: Check releasable charts
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      release: ${{ steps.charts.outputs.release }}
      matrix: ${{ steps.charts.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install YQ
        uses: action-stars/install-tool-from-github-release@243ac555111a84756285bf7dc55df821a55d32d9 # v0.2.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: mikefarah
          repository: yq
          extract: false
          filename_format: "{name}_{os}_{arch}"
          check_command: yq --version
          version: latest

      - name: Check for Helm charts to release
        id: charts
        run: |
          set -euo pipefail

          release_name_version_prefix="${{ inputs.release_name_version_prefix }}"

          release_charts=""

          for chart_dir in ./${{ inputs.chart_dir }}/*
          do
            if [[ -d "${chart_dir}" ]]
            then
              chart="$(basename "${chart_dir}")"
              released_version="$(git tag -l --sort version:refname "${chart}-*" | tail -n 1 | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' || true)"
              current_version="$(yq eval '.version' "./${{ inputs.chart_dir }}/${chart}/Chart.yaml")"

              if [[ "${current_version}" != "${released_version}" ]] && [[ -z "$(git tag -l "${chart}-${release_name_version_prefix}${current_version}")" ]]
              then
                echo "Chart: ${chart}, Released version: ${released_version}, Current version: ${current_version}"
                release_charts="${release_charts}${chart},"
              fi
            fi
          done

          if [[ -n "${release_charts}" ]]
          then
            echo "release=true" >> "${GITHUB_OUTPUT}"
          else
            echo "release=false" >> "${GITHUB_OUTPUT}"
          fi

          echo "matrix=$(jq -Rrc 'split(",")' <<< "${release_charts%,}")" >> "${GITHUB_OUTPUT}"

  release:
    name: Release Helm charts
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    defaults:
      run:
        shell: bash
    needs: check
    if: ${{ needs.check.outputs.release == 'true' }}
    strategy:
      max-parallel: 1
      matrix:
        chart: ${{ fromJson(needs.check.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          fetch-depth: 0

      - name: Install YQ
        uses: action-stars/install-tool-from-github-release@243ac555111a84756285bf7dc55df821a55d32d9 # v0.2.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: mikefarah
          repository: yq
          extract: false
          filename_format: "{name}_{os}_{arch}"
          check_command: yq --version
          version: latest

      - name: Install Helm
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
        with:
          version: latest

      - name: Configure Helm repos
        if: ${{ inputs.helm_repos }}
        run: |
          set -euo pipefail

          repos="${{ inputs.helm_repos }}"
          for repo in ${repos//,/ }
          do
            helm repo add "${repo%=*}" "${repo#*=}"
          done

      - name: Install chart-releaser
        uses: helm/chart-releaser-action@a917fd15b20e8b64b94d9158ad54cd6345335584 # v1.6.0
        with:
          install_only: true

      - name: Configure Git
        run: |
          set -euo pipefail
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Get chart version
        id: chart_version
        run: |
          set -euo pipefail
          echo "version=$(yq eval '.version' './${{ inputs.chart_dir }}/${{ matrix.chart }}/Chart.yaml')" >> "${GITHUB_OUTPUT}"

      - name: Get changelog entry
        if: inputs.release_notes
        id: changelog_reader
        uses: mindsers/changelog-reader-action@32aa5b4c155d76c94e4ec883a223c947b2f02656 # v2.2.3
        with:
          path: ./${{ inputs.chart_dir }}/${{ matrix.chart }}/CHANGELOG.md
          version: v${{ steps.chart_version.outputs.version }}

      - name: Package chart
        id: package
        run: |
          set -euo pipefail

          package_dir="./.cr-release-packages"
          mkdir -p "${package_dir}"

          release_notes_file="RELEASE.md"

          if [[ "${{ inputs.release_notes }}" == "true" ]]
          then
            release_notes_path="./${{ inputs.chart_dir }}/${{ matrix.chart }}/${release_notes_file}"

            cat <<"EOF" > "${release_notes_path}"
          ${{ steps.changelog_reader.outputs.changes }}
          EOF

            sed -r -i 's/\[(@[^]]+)\]\([^)]+\)/\1/g' "${release_notes_path}"
          fi

          cr package --package-path="${package_dir}" ./${{ inputs.chart_dir }}/${{ matrix.chart }}

          echo "path=${package_dir}/${{ matrix.chart }}-${{ steps.chart_version.outputs.version }}.tgz" >> "${GITHUB_OUTPUT}"
          echo "release_notes_file=${release_notes_file}" >> "${GITHUB_OUTPUT}"

      - name: Create chart GH release
        run: |
          set -euo pipefail

          package_dir="$(dirname ${{ steps.package.outputs.path }})"
          release_name_template="{{ .Name }}-${{ inputs.release_name_version_prefix }}{{ .Version }}"

          cr upload --token=${{ secrets.GITHUB_TOKEN }} --owner=${{ github.repository_owner }} --git-repo=${{ github.event.repository.name }} --commit=${{ github.sha }} --package-path="${package_dir}" --release-name-template="${release_name_template}" --release-notes-file=${{ steps.package.outputs.release_notes_file }} --make-release-latest=${{ inputs.release_as_latest }}

      - name: Login to OCI registry
        if: inputs.publish_oci
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ${{ inputs.oci_registry }}
          username: ${{ inputs.oci_username }}
          password: ${{ secrets.oci_password || secrets.GITHUB_TOKEN }}

      - name: Install Crane
        if: inputs.publish_oci
        uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3

      - name: Install ORAS
        if: inputs.publish_oci
        uses: action-stars/install-tool-from-github-release@243ac555111a84756285bf7dc55df821a55d32d9 # v0.2.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: oras-project
          repository: oras
          check_command: oras version
          version: latest

      - name: Configure OCI repository
        if: inputs.publish_oci
        run: |
          set -euo pipefail

          ah_config_path="./${{ inputs.chart_dir }}/${{ matrix.chart }}/${{ inputs.artifact_hub_config_file }}"

          if [[ -f "${ah_config_path}" ]]
          then
            date_epoch="$(git log -1 --format='%ct' "${ah_config_path}")"
            created_date="$(date -u --date="@${date_epoch}" "+%Y-%m-%dT%H:%M:%SZ" 2>/dev/null)"

            image_config_path="$(mktemp)"
            echo "{}" > "${image_config_path}"

            media_type="application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml"
            oci_repository="${{ inputs.oci_registry }}/${{ inputs.oci_repository_prefix }}/${{ matrix.chart }}"
            oci_image="${oci_repository}:artifacthub.io"

            oras push --annotation "org.opencontainers.image.created=${created_date}" --config "${image_config_path}:application/vnd.cncf.artifacthub.config.v1+yaml" "${oci_image}" "${ah_config_path}:${media_type}"
          fi

      - name: Install Cosign
        if: inputs.publish_oci
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Publish chart to OCI repository
        if: inputs.publish_oci
        run: |
          set -euo pipefail

          oci_repository="${{ inputs.oci_registry }}/${{ inputs.oci_repository_prefix }}/${{ matrix.chart }}"
          oci_image="${oci_repository}:${{ steps.chart_version.outputs.version }}"

          helm registry login --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} "${{ inputs.oci_registry }}"
          helm push ${{ steps.package.outputs.path }} "oci://${{ inputs.oci_registry }}/${{ inputs.oci_repository_prefix }}"

          digest="$(crane digest "${oci_image}")"
          cosign sign --yes "${oci_image}@${digest}"

      - name: Publish chart to GH Pages
        if: inputs.publish_gh_pages
        run: |
          set -euo pipefail

          index_dir="./.cr-index"
          mkdir -p "${index_dir}"

          package_dir="$(dirname ${{ steps.package.outputs.path }})"

          cr index --token=${{ secrets.GITHUB_TOKEN }} --push --owner=${{ github.repository_owner }} --git-repo=${{ github.event.repository.name }} --package-path="${package_dir}" --index-path="${index_dir}/index.yaml"
